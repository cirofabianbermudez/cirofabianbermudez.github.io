{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li> <p> SV (SystemVerilog)</p> <p>Read about SystemVerilog language features from the LRM, coding examples, OOP, etc. </p> <p> Read more</p> </li> <li> <p> About me</p> <p>Contact our team.</p> <p> Read more</p> </li> </ul>"},{"location":"about_me/","title":"About me","text":""},{"location":"blog/","title":"Blog","text":"","tags":[]},{"location":"blog/posts/obsidian_setup/","title":"Configuraci\u00f3n de Obsidian","text":"<p>Este art\u00edculo es una gu\u00eda de c\u00f3mo configurar Obsidian para sacarle el mayor provecho, si bien Obsidian es perfectamente funcional despu\u00e9s de instalarlo, existen una gran cantidad de plugins que ayudan a extender su funcionalidad  y convertirlo en m\u00e1s que una aplicaci\u00f3n para tomar notas. </p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#portabilidad","title":"Portabilidad","text":"<p>Cuando quieras copiar toda tu configuraci\u00f3n de un vault a otro solo es necesario copiar la carpeta <code>.obsidian</code> y pegarla en la ra\u00edz del vault donde quieras la misma configuraci\u00f3n. De esta manera una vez configurado todo no es necesario reconfigurar para cada nuevo vault.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#atajos-utiles","title":"Atajos \u00fatiles","text":"<p>Lo primero que aprend\u00ed despu\u00e9s de instalar Obsidian fueron los atajos de teclado. Para mi es muy importante no despegar las manos del teclado y por lo tanto no depender de tener un mouse a la mano. Los atajos de teclado son una manera de agilizar el flujo de trabajo de cualquier persona y estos son mis favoritos. Marcar\u00e9 con el s\u00edmbolo !! atajos que pienso son esenciales.</p> Comando Hotkey Quick search <code>Ctrl + o</code> !! Bold <code>Ctrl + b</code> !! Italics <code>Ctrl + i</code> Web link <code>Ctrl + k</code> New note <code>Ctrl + n</code> !! New note in new tab <code>Ctrl + Shift + n</code> Toggle check list <code>Ctrl + l</code> Open command palet <code>Ctrl + p</code> !! New note from template <code>Alt + n</code> !! Open link in the same tab <code>Alt + Enter</code> Switch tabs right <code>Ctrl + Tab</code> Switch tabs left <code>Ctrl + Shift + Tab</code> Open graph view <code>Ctrl + g</code> Open link in another tab <code>Ctrl + Enter</code> Open settings <code>Ctrl + ,</code> Open last closed window <code>Ctrl + Shift + t</code> !! Toggle reading viwe <code>Ctrl + e</code> !!","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#atajos-personalizados","title":"Atajos personalizados","text":"<p>Una de las cosas que no me gusta de Obsidian es que los men\u00fas laterales despu\u00e9s de redimensionar la ventana utilizan la mayor\u00eda del espacio disponible. Para poder contraerlos de manera r\u00e1pida a\u00f1ad\u00ed los primeros dos atajos de teclado personalizados de la siguiente tabla.</p> <p>En muchas ocasiones es necesario comprobar c\u00f3mo se ve el c\u00f3digo como si fuera le\u00eddo como un simple archivo de texto, para esto a\u00f1ad\u00ed el tercer atajo de teclado personalizado, finalmente para a\u00f1adir links internos y no tener que escribir <code>[[]]</code> manualmente a\u00f1ad\u00ed el cuarto atajo.</p> Comando Hotkey Toggle Left sidebar <code>Ctrl + \\</code> Toggle Right sidebar <code>Ctrl + Space</code> Toggle Live Preview/Source mode <code>Ctrl + r</code> Add internal link <code>Ctrl + j</code>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#opciones","title":"Opciones","text":"","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#files-links","title":"Files &amp; Links","text":"<p>Configurar Attachments folder path a una carpeta espec\u00edfica llamada <code>attachments</code>creada manualmente en la ruta principal del vault. Esto ayuda a que las imagenes que se a\u00f1aden arrastrandolas o copiandolas y pegandolas siempre se encuentren en una carpeta definida y no exparcidas en carpetas diferentes de cada nota.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#community-plugins","title":"Community Plugins","text":"<p>Ya hacen 3 a\u00f1os desde que comenc\u00e9 a utilizar Obsidian y una de las razonas por las que decid\u00ed hacer esta entrada de blog es para mantener un registro de todos los plugins que he encontrado a lo largo de este tiempo. Aqui estan los todos los plugins que utilizo en mi d\u00eda a d\u00eda y c\u00f3mo los tengo configurados.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#tagfolder","title":"TagFolder","text":"<p>TagFolder es un plugin que permite poder visualizar todas las notas que con tienen tags con una visualizaci\u00f3n de folder organizada y jer\u00e1rquica.</p> <p>Una vez instalado presiona <code>Ctrl+p</code> y selecciona <code>Show Tag Folder</code>.</p> <p>En el men\u00fa izquierdo se mostrar\u00e1 una pesta\u00f1a con los tags organizados.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#linter","title":"Linter","text":"<p>Linter es un plugin de que da formato y estilo a tus notas centr\u00e1ndose en la configurabilidad y extensibilidad. Las reglas pueden ser activadas y configuradas en los ajustes. La documentaci\u00f3n principal sobre las reglas y otras cosas se encuentran en la wiki.</p> <p>Este es uno de los plugins m\u00e1s importantes de todos ya que me permite darle formato a mis notas de manera muy r\u00e1pida utilizando un atajo de teclado.</p> <p>Estas son mis configuraciones personales:</p> <p>YAML rules</p> <ul> <li>format-tags-in-yaml</li> <li>insert-yaml-attributes<ul> <li>Agregar <code>authors: &lt;author_name&gt;</code></li> </ul> </li> <li>yaml-key-sort<ul> <li>Activar el orden alfab\u00e9tico ascendente.</li> </ul> </li> <li>yaml-timestamp Desactivar y mejor utilizar el plugin Update time on edit<ul> <li>Cambiar <code>date created</code> por <code>date_created</code>.</li> <li>Cambiar <code>date modified</code> por <code>date_modified</code>.</li> </ul> </li> <li>yaml-title-alias</li> </ul> <p>Heading rules</p> <ul> <li>header-increment</li> <li>headings-start-line</li> <li>remove-trailing-punctuation-in-heading</li> </ul> <p>Content rules</p> <ul> <li>auto-correct-common-misspellings</li> <li>blockquote-style</li> <li>convert-bullet-list-markers</li> <li>emphasis-style</li> <li>no-bare-urls</li> <li>remove-consecutive-list-markers</li> <li>remove-empty-list-markers</li> <li>remove-hyphenated-line-breaks</li> <li>remove-multiple-spaces</li> <li>strong-style</li> </ul> <p>Spacing rules</p> <ul> <li>compact-yaml</li> <li>consecutive-blank-lines</li> <li>convert-spaces-to-tabs</li> <li>empty-line-around-blockquotes</li> <li>empty-line-around-code-fences</li> <li>empty-line-around-math-blocks</li> <li>empty-line-around-tables</li> <li>heading-blank-lines</li> <li>line-break-at-document-end</li> <li>move-math-block-indicators-to-their-own-line</li> <li>paragraph-blank-lines</li> <li>remove-empty-lines-between-list-markers-and-checklists</li> <li>remove-link-spacing</li> <li>remove-space-around-characters</li> <li>remove-space-before-or-after-characters</li> <li>space-after-list-markers</li> <li>trailing-spaces</li> </ul> <p>Una vez instalado y configurado el plugin presiona <code>Ctrl+p</code> y selecciona <code>Linter: lint the current file</code>, tambi\u00e9n se puede utilizar el atajo <code>Ctrl+Alt+L</code>.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#calendar","title":"Calendar","text":"<p>Calendar es un plugin que crea una sencilla vista de Calendario para visualizar y navegar entre las notas diarias.</p> <p>Se puede configurar para incluir el n\u00famero de la semana.</p> <p>Para abrir el calendario se presiona <code>Ctrl+p</code> y seleccionar <code>Calendar: Open view</code>.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#dataview","title":"Dataview","text":"<p>Dataview es un plugin que trata tu Obsidian Vault como una base de datos que puedes consultar. Proporciona una API JavaScript y un lenguaje pipeline-based query para filtrar, ordenar y extraer datos de p\u00e1ginas Markdown.</p> <p>Es una buena idea activar:</p> <ul> <li>Enable JavaScript Queries</li> <li>Enable Inline JavaScript Queries</li> </ul> <p>\u00bfC\u00f3mo utilizar Dataview?</p> <p>Estos son los campos impl\u00edcitos (Implicit Fields) que se pueden utilizar.</p> Field Name Data Type Description <code>file.name</code> Text The file name as seen in Obsidians sidebar. <code>file.folder</code> Text The path of the folder this file belongs to. <code>file.path</code> Text The full file path, including the files name. <code>file.ext</code> Text The extension of the file type; generally <code>md</code>. <code>file.link</code> Link A link to the file. <code>file.size</code> Number The size (in bytes) of the file. <code>file.ctime</code> Date with Time The date that the file was created. <code>file.cday</code> Date The date that the file was created. <code>file.mtime</code> Date with Time The date that the file was last modified. <code>file.mday</code> Date The date that the file was last modified. <code>file.tags</code> List A list of all unique tags in the note. Subtags are broken down by each level, so <code>#Tag/1/A</code> will be stored in the list as <code>[#Tag, #Tag/1, #Tag/1/A]</code>. <code>file.etags</code> List A list of all explicit tags in the note; unlike <code>file.tags</code>, does not break subtags down, i.e. <code>[#Tag/1/A]</code> <code>file.inlinks</code> List A list of all incoming links to this file, meaning all files that contain a link to this file. <code>file.outlinks</code> List A list of all outgoing links from this file, meaning all links the file contains. <code>file.aliases</code> List A list of all aliases for the note as defined via the YAML frontmatter. <code>file.tasks</code> List A list of all tasks (I.e., <code>| [] some task</code>) in this file. <code>file.lists</code> List A list of all list elements in the file (including tasks); these elements are effectively tasks and can be rendered in task views. <code>file.frontmatter</code> List Contains the raw values of all frontmatter in form of <code>key | value</code> text values; mainly useful for checking raw frontmatter values or for dynamically listing frontmatter keys. <code>file.day</code> Date Only available if the file has a date inside its file name (of form <code>yyyy-mm-dd</code> or <code>yyyymmdd</code>), or has a <code>Date</code> field/inline field. <code>file.starred</code> Boolean If this file has been bookmarked via the Obsidian Core Plugin \"Bookmarks\". <p>Pasos a seguir</p> <ol> <li>Crear una query con un bloque de c\u00f3digo con el lenguaje <code>dataview</code>.</li> <li>Seleccionar el tipo de visualizaci\u00f3n y opcionalmente una columna escribiendo alg\u00fan elemento de los metadatos:<ul> <li><code>LIST</code></li> <li><code>TABLE</code></li> <li><code>TASK</code></li> <li><code>CALENDAR</code></li> </ul> </li> <li>Seleccionar la fuente donde se realizar\u00e1 la b\u00fasqueda con <code>FROM</code>:<ul> <li><code>\"nombre_de_la_carpeta\"</code></li> <li><code>#etiqueta</code></li> <li><code>[[backlinks]]</code></li> </ul> </li> <li>Seleccionar filtros con la palabra <code>WHERE</code><ul> <li><code>metadato = \"Something\"</code></li> <li><code>contains(tags,\"Something\")</code></li> <li><code>date &gt;= date(2022-02-01)</code></li> </ul> </li> <li>Ordenar utilizando <code>SORT</code><ul> <li><code>file.name ASC</code></li> <li><code>file.name DESC</code></li> </ul> </li> </ol>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#editor-syntax-highlight","title":"Editor Syntax Highlight","text":"<p>Editor Syntax Highlight es un plugin que permite resaltar la sintaxis de los bloques de c\u00f3digo en el editor.</p> <p>Aqu\u00ed se muestra un ejemplo de c\u00f3mo resalta el c\u00f3digo un c\u00f3digo en Python.</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]  \nfor x in fruits:  \n  print(x)  \n</code></pre>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#kanban","title":"Kanban","text":"<p>Kaban es un plugin que sirve para crear tableros Kanban con Markdown en Obsidian.</p> <p>Se pueden obtener ideas de c\u00f3mo realizar un Kanban Board de kanbanize.</p> <p>Kanban es un popular m\u00e9todo de gesti\u00f3n del flujo de trabajo para definir, gestionar y mejorar los servicios que ofrecen trabajo del conocimiento. Le ayuda a visualizar el trabajo, maximizar la eficiencia y mejorar continuamente. El trabajo se representa en tableros Kanban, lo que le permite optimizar la entrega de trabajo en varios equipos y gestionar incluso los proyectos m\u00e1s complejos en un \u00fanico entorno.</p> <ol> <li>Visualizar el flujo de trabajo.</li> <li>Limitar el trabajo en progreso.</li> <li>Administrar el flujo.</li> <li>Explicitar las pol\u00edticas de procesos.</li> <li>Aplicar flujos de retroalimentaci\u00f3n.</li> <li> <p>Mejorar de forma colaborativa.</p> </li> <li> <p>Crea un tablero Kanban.</p> </li> <li>Visualiza todo el proceso en etapas.</li> <li>Limita los trabajos en progreso.</li> <li>Las tarjetas Kanban representan son una tarea.</li> <li>Cada tarjeta Kanban contiene informaci\u00f3n de:<ul> <li>Detalles sobre la tarea.</li> <li>\u00bfQui\u00e9n es el responsible?</li> <li>\u00bfCu\u00e1l es la fecha l\u00edmite?</li> <li>\u00bfCu\u00e1l es la prioridad?</li> </ul> </li> <li>Lead Time es tiempo que tarda una tarjeta en moverse desde el inicio hasta el final.</li> </ol>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#outliner","title":"Outliner","text":"<p>Outliner es un plugin que permite trabajar las listas como en Workflowy o RoamResearch.</p> Command Default hotkey (Windows/Linux) Default hotkey (MacOS) Mover lista y sublistas hacia arriba <code>Ctrl+Shift+\u2191</code> <code>Command+Shift+\u2191</code> Desplazar lista y sublistas hacia abajo <code>Ctrl+Shift+\u2193</code> <code>Command+Shift+\u2193</code> Indentar la lista y las sublistas <code>Tab</code> <code>Tab</code> Desindentar la lista y las sublistas <code>Shift+Tab</code> <code>Shift+Tab</code>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#advanced-tables","title":"Advanced Tables","text":"<p>Advances Tables es un plugin que a\u00f1ade navegaci\u00f3n, formato y manipulaci\u00f3n mejorados a las tablas markdown en Obsidian:</p> <ul> <li>Auto formato.</li> <li>Navegaci\u00f3n de tablas similar a Excel (tabulador/entrada entre celdas y filas).</li> <li>F\u00f3rmulas de hoja de c\u00e1lculo.</li> <li>A\u00f1adir, eliminar y mover columnas y filas.</li> <li>Establecer la alineaci\u00f3n de las columnas (izquierda, centro, derecha).</li> <li>Ordenar filas por una columna especificada.</li> <li>Exportar a CSV.</li> </ul> <p>\u00bfC\u00f3mo utilizar Advanced Tables?</p> <p>Para crear una tabla, cree un \u00fanico car\u00e1cter <code>|</code>,  escriba el primer encabezado de la tabla y pulse <code>Tab</code>. Contin\u00fae introduciendo encabezamientos y pulsando <code>Tab</code>  hasta crear todos los encabezamientos. Pulsa <code>Enter</code> para ir a la primera fila. Contin\u00faa rellenando celdas como antes y pulsa <code>Enter</code> de nuevo para cada nueva fila.</p> Hotkey Action <code>Tab</code> Columna siguiente <code>Shift + Tab</code> Columna anterior <code>Enter</code> Fila siguiente <code>Ctrl + Shift + D</code> Abrir la barra lateral de controles de tabla <code>Shift + Enter</code> Salir de la \u00faltima fila de la tabla <p>Se pueden utilizar como hojas de c\u00e1lculo, ver la documentaci\u00f3n en Formulas in Markdown Tables, por ejemplo:</p> Item Grams Whole Wheat Flour 110 Bread Flour 748 Warm Water 691 Salt 18 Starter 10 Total Grams 1577 Nota <p>La etiqueta <code>&lt;!-- TBLFM:... --&gt;</code> no debe estar separada de la tabla.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#templeater","title":"Templeater","text":"<p>Templater es un plugin de plantillas para Obsidian. Define un lenguaje de plantillas que te permite insertar resultados de variables y funciones en tus notas. Tambi\u00e9n le permitir\u00e1 ejecutar c\u00f3digo JavaScript manipulando esas variables y funciones.</p> <p>El video de Using the Obsidian Templater Plugin es un buen punto de partida para empezar a utilizar este plugin.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#advanced-slides","title":"Advanced Slides","text":"<p>Advanced Slides es un plugin que permite crear presentaciones utilizando lenguaje Markdown.</p> <p>Se pueden aprender siguiendo la documentaci\u00f3n oficial, el video tutorial de Nicole van der Hoeven o la plantilla de No Boilerplate que se muestra en el siguiente video.</p> <p>Es una herramienta muy \u00fatil para realizar presentaciones para videos de Youtube, presentaciones formales o cualquier tipo de presentaci\u00f3n en general.</p> <p>Para entrar al visualizador se presiona <code>Ctrl+p</code> y seleccionar <code>Advanced Slides: Show Slide Preview</code>.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#excalidraw","title":"ExcaliDraw","text":"<p>[ExcaliDraw] es un plugin que integra Excalidraw, una herramienta de dibujo rica en caracter\u00edsticas, en Obsidian. Puede almacenar y editar archivos Excalidraw en su b\u00f3veda, puede incrustar dibujos en sus documentos, y se puede vincular a los documentos y otros dibujos a / y de Excalidraw.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#better-word-count","title":"Better Word Count","text":"<p>Better Word Count es un plugin que hace exactamente lo mismo que el incorporado Word Count plugin, excepto cuando se selecciona el texto, que contar\u00e1 la palabra seleccionada en lugar de todo el documento.</p> <p>Se recomienda desactivar el contador de palabras integrado porque este plugin est\u00e1 dise\u00f1ado para reemplazarlo.</p> <p>Este plugin tambi\u00e9n tiene la capacidad de almacenar estad\u00edsticas sobre su b\u00f3veda.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#hider","title":"Hider","text":"<p>Hider es un plugin que permite ocultar ciertas partes de la interfaz de Obsidian. </p> <p>Este plugin no es absolutamente necesario pero es \u00fatil para crear un flujo de trabajo personalizado.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#projects","title":"Projects","text":"<p>Projects es un plugin para Obsidian que te permite gestionar y visualizar notas para la gesti\u00f3n de proyectos.</p> <ul> <li>Crea proyectos a partir de carpetas y consultas Dataview.</li> <li>Cambia entre cuatro vistas diferentes: Tabla, Tablero, Calendario y Galer\u00eda.</li> <li>Configura plantillas de notas para cada proyecto.</li> </ul> <p>Por ejemplo, si eres gestor de contenidos, Projects puede ayudarte a gestionar tu calendario de contenidos. Crea borradores, controla su estado y cu\u00e1ndo est\u00e1 prevista su publicaci\u00f3n.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#settings-search","title":"Settings Search","text":"<p>Settings Search es un plugin que a\u00f1ade una funci\u00f3n de b\u00fasqueda global a los ajustes de Obsidian, lo que permite a los usuarios buscar r\u00e1pidamente un ajuste concreto. Recordar que para entrar de manera r\u00e1pida a las configuraciones se puede utilizar el atajo <code>Ctrl+,</code>.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#recent-files","title":"Recent Files","text":"<p>Recent Files es un plugin que muestra una lista de los archivos abiertos m\u00e1s recientemente en la barra lateral.</p>","tags":["Obsidian"]},{"location":"blog/posts/obsidian_setup/#update-time-on-edit","title":"Update time on edit","text":"<p>Update time on edit es un plugin que actualiza al guardar los metadatos del archivo con la hora en que se actualiz\u00f3, y la hora de creaci\u00f3n si no la hay (\u00fatil para archivos nuevos).</p>","tags":["Obsidian"]},{"location":"blog/posts/yaml/","title":"YAML","text":"<p>Este art\u00edculo es una gu\u00eda con ejemplos pr\u00e1cticos de c\u00f3mo utilizar YAML para generar metadatos en archivos <code>.md</code> en Obsidian y Mkdocs adem\u00e1s de c\u00f3mo utilizarlos para generar archivos de configuraci\u00f3n en otros lenguajes de programaci\u00f3n.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#que-es","title":"\u00bfQu\u00e9 es?","text":"<p>YAML Ain't Markup Language (YAML) es un lenguaje de serializaci\u00f3n de datos dise\u00f1ado para ser directamente escribible y legible por humanos. </p> <p>A menudo se utiliza como formato para archivos de configuraci\u00f3n, pero sus capacidades de serializaci\u00f3n de objetos lo convierten en un sustituto viable para lenguajes como JSON. </p> <p>YAML tiene un amplio soporte de lenguaje y se mapea f\u00e1cilmente en estructuras de datos nativas. Tambi\u00e9n es f\u00e1cil de leer para los humanos, por lo que es una buena opci\u00f3n para archivos de configuraci\u00f3n. El acr\u00f3nimo YAML era la abreviatura de Yet Another Markup Language. Pero sus mantenedores lo rebautizaron como YAML Ain't Markup Language para poner m\u00e1s \u00e9nfasis en sus caracter\u00edsticas orientadas a los datos.</p> <p>Similar a Python, YAML utiliza nuevas l\u00edneas e indentaci\u00f3n sint\u00e1cticas significativas en su sintaxis. Sin embargo, a diferencia de Python, YAML no permite caracteres de tabulaci\u00f3n literales para la sangr\u00eda.</p> <p>Las extensiones de los archivos no influyen en su contenido. Puedes guardar contenido YAML en archivos con cualquier extensi\u00f3n: <code>.yml</code>, <code>.yaml</code> o cualquier otra, pero la recomendaci\u00f3n de uno de sus mantenedores es utilizar <code>.yaml</code> siempre que sea posible.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#fundamentos","title":"Fundamentos","text":"<p>La sintaxis de YAML es muy parecida a la estructura de datos de  diccionarios  en Python. Esta estructura se basa en el par <code>key: value</code>, donde para acceder al <code>value</code>, es necesario utilizar la <code>key</code>.</p> <p>Veamos brevemente un archivo YAML.</p> example1.yaml<pre><code>---\nrefran: \"el tiempo es oro\"\nnombre: \"pepe pecas\"\npi: 3.14159\nnavidad: true\nnum_cartas: 40\nfamiliares:\n  - lois\n  - hal\n  - francis\n  - reese\n  - malcolm\n  - dewey\n  - jamie\ncampamento:\n  lugar: bosque\n  lata: 3\n  cuerda: 5\n  mochila:\n    linterna: 1\n    comida: \"barras energeticas\"\n  extras: botiquin\n</code></pre> <p>El archivo comienza con tres guiones. Estos guiones indican el inicio de un nuevo documento YAML. YAML admite m\u00faltiples documentos, y los analizadores sint\u00e1cticos compatibles reconocer\u00e1n cada conjunto de guiones como el comienzo de uno nuevo. Despu\u00e9s, vemos la construcci\u00f3n que compone la mayor parte de un documento YAML t\u00edpico: un par key-value. El elemento<code>refran</code> es una key  que apunta a un value de tipo cadena: <code>el tiempo es oro</code>.   YAML admite m\u00e1s que solo valores de tipo cadena. El archivo comienza con seis pares key-value. Tienen cuatro tipos de datos diferentes. <code>refran</code> y <code>nombre</code> son cadenas (strings), <code>pi</code> es un n\u00famero de punto flotante (floating-point number), <code>navidad</code> es un booleano (boolean), <code>latas</code> es un n\u00famero entero (integer). Se pueden encerrar los strings entre comillas simples(<code>''</code>) o dobles(<code>\"\"</code>) o sin comillas. YAML reconoce los n\u00fameros sin comillas como enteros o de putno flotante. El s\u00e9ptimo elemento es un arreglo (array). El elemento <code>familiares</code> tiene siete elementos, cada uno denotado por un gui\u00f3n de apertura. He indentado los elementos de <code>familiares</code> con dos espacios. La indentaci\u00f3n es la forma en que YAML denota el anidamiento. El n\u00famero de espacios puede variar de un archivo a otro, pero las tabulaciones no est\u00e1n permitidas. M\u00e1s adelante veremos c\u00f3mo funciona la indentaci\u00f3n. Por \u00faltimo, vemos <code>campamento</code>, que tiene cinco elementos m\u00e1s en su interior, cada uno de ellos con indentaci\u00f3n. Podemos ver <code>campamento</code> como un diccionario que contiene dos cadenas, dos enteros y otro diccionario. YAML permite anidar valores clave y mezclar tipos.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#indentacion-y-espacio-en-blanco","title":"Indentaci\u00f3n  y espacio en blanco","text":"<p>Los espacios en blanco forman parte del formato de YAML. A menos que se indique lo contrario, las nuevas l\u00edneas indican el final de un campo. Un documento YAML se estructura con indentaci\u00f3n. El nivel de indentaci\u00f3n puede ser de uno o varios espacios. La especificaci\u00f3n proh\u00edbe los tabuladores porque las herramientas los tratan de forma diferente. Considere el siguiente ejemplo. Los elementos que contiene est\u00e1n indentados con dos espacios.</p> example.yaml<pre><code>nombre: pepe\nedad: 25\nestudios:\n  licenciatura: comercio\n  maestria: economia\n</code></pre> <p>Veamos c\u00f3mo un simple script de Python visualiza este documento. Lo guardaremos como un archivo llamado <code>example.yml</code>. El paquete PyYAML mapear\u00e1 el flujo del archivo YAML en un diccionario. Iteraremos a trav\u00e9s del conjunto m\u00e1s externo de keys y values e imprimiremos la key y la representaci\u00f3n de cadena de cada valor.</p> Nota: <p>Si no tiene instalado PyYAML, lo puede hacer con el comando: <pre><code>pip install pyyaml\n</code></pre></p> <p>readyml.py<pre><code>import yaml \n\nif __name__ == '__main__':\n    yml_file = \"example.yaml\"\n    with open(yml_file, 'r') as archivo:\n        dictionary = yaml.safe_load(archivo)\n\n    print(dictionary)\n\n    for key, value in dictionary.items():\n        print (key + \" : \" + str(value))\n</code></pre> La salida es:</p> <pre><code>{'nombre': 'pepe', 'edad': 25, 'estudios': {'licenciatura': 'comercio', 'maestria': 'economia'}}\nnombre : pepe\nedad : 25\nestudios : {'licenciatura': 'comercio', 'maestria': 'economia'}\n</code></pre> <p>Podemos ver en la salida que nuestro documento es un diccionario de Python con dos cadenas y otro diccionario anidado dentro de \u00e9l. El simple anidamiento de YAML nos da el poder de construir objetos sofisticados.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#comentarios","title":"Comentarios","text":"<p>Los comentarios empiezan por el s\u00edmbolo almohadilla (<code>#</code>). Pueden aparecer despu\u00e9s de un valor del documento u ocupar una l\u00ednea entera.</p> <pre><code># Este es un comentario de l\u00ednea completa\nnombre: pepe # Este tambien es un comentario\n</code></pre> <p>Los comentarios son para los humanos. Los procesadores YAML los descartar\u00e1n.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#tipos-de-datos","title":"Tipos de datos","text":"<p>Los valores de los pares key-values de YAML son escalares. Act\u00faan como los tipos escalares de lenguajes como Perl, Javascript y Python. Normalmente basta con encerrar las cadenas entre comillas, dejar los n\u00fameros sin comillas y dejar que el analizador lo resuelva. Pero eso es s\u00f3lo la punta del iceberg. YAML es capaz de mucho m\u00e1s.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#pares-key-value-y-diccionarios","title":"Pares Key-Value y diccionarios","text":"<p>El key-value es el elemento b\u00e1sico de YAML. Cada elemento de un documento YAML es miembro de al menos un diccionario. La key es siempre una cadena. El value es un escalar, por lo que puede ser cualquier tipo de dato. As\u00ed, como ya hemos visto, el valor puede ser una cadena, un n\u00famero u otro diccionario.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#tipos-numericos","title":"Tipos num\u00e9ricos","text":"<p>YAML reconoce los tipos num\u00e9ricos. Anteriormente vimos el punto flotante y los enteros. YAML soporta otros tipos num\u00e9ricos.</p> <p>Un entero puede ser decimal, hexadecimal u octal. <code>0x</code> indica que un valor es hexadecimal, y un cero a la izquierda indica un valor octal.  YAML admite n\u00fameros de punto flotante  y exponencial. Podemos representar Not-A-Number (NAN) o el infinito.</p> <pre><code>entero: 12345\nhexadecimal: 0x12d4\noctal: 023332\nflotante: 1230.15\nexponencial: 12.3015e+05\ninfinito: .inf\ninfinito_neg: -.Inf\nnot_a_number: .NAN\n</code></pre>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#cadenas","title":"Cadenas","text":"<p>Las cadenas YAML son Unicode. En la mayor\u00eda de las situaciones, no es necesario especificarlas entre comillas. Pero si queremos que se manejen las secuencias de escape, tenemos que utilizar comillas dobles. </p> <pre><code>cadena: Esta es una cadena normal\ncadena_esc: \"Esta no es una cadena normal\\n\"\n</code></pre> <p>Los valores de cadena pueden abarcar m\u00e1s de una l\u00ednea. Con el car\u00e1cter fold (mayor que <code>&gt;</code>), puede especificar una cadena en un bloque. Pero se interpreta sin las nuevas l\u00edneas.</p> <p>El car\u00e1cter de bloque (pipe <code>|</code>) tiene una funci\u00f3n similar, pero YAML interpreta el campo tal cual.</p> <pre><code>con_nuevas_lineas: &gt;\n  esta no es una cadena normal\n  abarca m\u00e1s de\n  una l\u00ednea\n  \u00bfves?\ntal_cual_es: |\n  esta no es una cadena normal\n  abarca m\u00e1s de\n  una l\u00ednea\n  \u00bfves?\n</code></pre>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#nulls","title":"Nulls","text":"<p>Los nulos se introducen con una tilde(~) o con el literal de cadena <code>null</code>. La representaci\u00f3n de Python para null es None.</p> <pre><code>foo: ~\nbar: null\n</code></pre>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#booleanos","title":"Booleanos","text":"<p>YAML indica los valores booleanos con las palabras clave True, On y Yes para verdadero. Falso se indica con False, Off o No.</p> <pre><code>enfermo: true\nganador: False\nluz: on\nTV: off\n</code></pre>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#arreglos","title":"Arreglos","text":"<p>Puede especificar matrices o listas en una sola l\u00ednea. </p> <pre><code>items: [ 1, 2, 3, 4, 5 ]\nnumbers: [ \"one\", \"two\", \"three\", \"four\" ]\n</code></pre> <p>Tambi\u00e9n puede ponerlos en varias l\u00edneas.</p> <p><pre><code>items:\n  - 1\n  - 2\n  - 3\n  - 4\n  - 5\nnames:\n  - \"one\"\n  - \"two\"\n  - \"three\"\n  - \"four\"\n</code></pre> El formato de l\u00edneas m\u00faltiples es \u00fatil para listas que contienen objetos complejos en lugar de escalares.</p> <p><pre><code>items:\n  - things:\n      thing1: lois\n      thing2: dewey\n      thing3: hal\n  - other_things:\n      key: value\n</code></pre> Un array puede contener cualquier valor YAML v\u00e1lido. Los valores de una lista no tienen por qu\u00e9 ser del mismo tipo.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#diccionarios","title":"Diccionarios","text":"<p>Ya hemos hablado de los diccionarios, pero a\u00fan hay m\u00e1s. Como los arrays, puedes poner diccionarios en l\u00ednea. Vimos este formato arriba. Es como python imprime los diccionarios.</p> <pre><code>foo: { thing1: lois, thing2: dewey, thing3: hal }\n</code></pre> <p>Ya los hemos visto antes abarcar l\u00edneas.</p> <pre><code>nombre: pepe\napellido: pecas\n</code></pre> <p>Y, por supuesto, pueden anidarse y contener cualquier valor.</p> <pre><code>persona:\n  cualidades:\n    - divertido\n    - capaz\n    - noble\n</code></pre>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#yaml-en-obsidian","title":"YAML en Obsidian","text":"<p>Uno de los principales atractivos de utilizar Obsidian adem\u00e1s de poder utilizar tags, es la capacidad de filtrar la informaci\u00f3n utilizando el plugin de Dataview, el cual le permite al usuario filtrar sus notas como si fueran una base de datos utilizando como base las metadatos ingresados al inicio de cada nota en lenguaje YAML. </p> <p>El usuario puede decidir que keys crear y manejarlas como desee, sin embargo en Obsidian  hay algunos keys por defecto:</p> <pre><code>---\ntags: \naliases:\ncssclasses: \npublish: \n---\n</code></pre> <ul> <li><code>tags:</code> es otra manera de a\u00f1adir etiquetas sin la necesitad de ponerlas en el texto principal de la nota.</li> <li><code>aliases:</code> sirve para ponerle nombres alternativos a las notas.</li> <li><code>cssclasses:</code> es para elegir qu\u00e9 elementos CSS utilizar en una nota determinada.</li> <li><code>publish:</code>  permite establecer si una nota debe publicarse utilizando Obsidian Publish o no.</li> </ul>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#tipos-de-propiedad","title":"Tipos de propiedad","text":"<p>Adem\u00e1s de un nombre y un valor, las propiedades tambi\u00e9n tienen un tipo. Un tipo de propiedad describe la clase de valores que se pueden almacenar. </p> <p>Obsidian admite los siguientes tipos de propiedades:</p> <ul> <li>Text</li> <li>List</li> <li>Number</li> <li>Checkbox</li> <li>Date</li> <li>Date &amp; time</li> </ul> <p>Una vez que se asigna un tipo de propiedad a una propiedad, se asume que todas las propiedades con ese nombre tienen el mismo tipo de propiedad.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#plantilla-de-obsidian","title":"Plantilla de Obsidian","text":"<p>Un buen punto de partida para empezar a utilizar YAML es nuestras notas en Obsidian es utilizando la siguiente plantilla.</p> <pre><code>---\npublish: false\ntags: null\ndate: 2023-08-29\naliases: null\nauthors: null\n---\n</code></pre> <p>Toda nota deber\u00eda tener la fecha en la que se creo, el autor que la hizo, decidir si se publica o no, tags para poder conectarse con otras notas y alias para b\u00fasqueda r\u00e1pida.</p> <p>Dependiendo de las necesidades se pueden agregar m\u00e1s campos y omitirlos. Por ejemplo si se crean notas para almacenar toda la informaci\u00f3n referente a una persona para generar una agenda se puede crear una plantilla de la siguiente manera:</p> <pre><code>---\npublish: false\ntags: [familiar, contacto]\naliases: ale\nname: Alejandro Fernandez\nphone: 5578965485\nage: 22\nbirth: 2000-12-03\nemail: email@gmail.com\naddress: 21 Sur 8900 La Libertad\nlocation: https://goo.gl/maps/lkfdioasdlkjlf978\njob: cantante\n---\n</code></pre> <p>En este ejemplo en particular se omiti\u00f3 el autor y la fecha porque no son relevantes para la nota. </p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#yaml-en-mkdocs","title":"YAML en Mkdocs","text":"<p>En Mkdocs se tiene la posibilidad de utilizar metadatos para poder organizar y habilitar funcionalidades extra en nuestras documentaciones. Por ejemplo los plugins de Social card, Blog y Tags hacen uso de los metadatos ingresados en lenguaje YAML al principio de cada archivo <code>.md</code> para crear tarjetas sociales personalizadas, crear entradas de blog de manera m\u00e1s sencilla e incluso organizar todos los archivos utilizando etiquetas.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#plantilla-para-archivos-sencillos","title":"Plantilla para archivos sencillos","text":"<p>Esta es una plantilla sugerida para el encabezado de los archivos normales en Mkdocs:</p> <pre><code>draft: false\ndate: 2023-09-10\ntitle: \"\"\ndescription: \nauthors: ciro\ntags: []\n# hide: \n#   - navigation\n#   - toc\n#  - path\n</code></pre> <ul> <li><code>draft:</code> nos permite saber si el archivo sigue en su fase de borrador o no.</li> <li><code>hide:</code> nos permite esconder para ese especifico archivo algunos de los elementos en la lista.</li> <li><code>tags:</code> nos permite categorizar el archivo para su posterior manejo en la pesta\u00f1a de tags.</li> </ul>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#plantilla-para-entradas-de-blog","title":"Plantilla para entradas de blog","text":"<p>Esta es una plantilla sugerida para el encabezado de las entradas de blog en Mkdocs:</p> <pre><code>draft: false\ndate: 2023-09-10\ndescription: \"\"\nauthors:\n  - pepe\ntags: []\ncategories: []\nreadtime: 15\n# hide: \n#   - navigation\n#   - toc\n#  - path\n</code></pre> <ul> <li><code>readtime:</code> permite asignar manualmente el tiempo que puede llevar leer la entrada de blog.</li> <li><code>categories:</code> es una propiedad que se define en el archivo <code>mkdocs.yml</code> con las categorias admitidas en las entradas de blog, para m\u00e1s informaci\u00f3n ver el plugin de Blogs.</li> <li><code>authors:</code> se debe crear un archivo <code>.authors.yml</code>con la informaci\u00f3n del autor, para m\u00e1s informaci\u00f3n ver el plugin de Blogs.</li> </ul>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#conclusion","title":"Conclusi\u00f3n","text":"<p>YAML es un potente lenguaje que puede utilizarse para archivos de configuraci\u00f3n, mensajes entre aplicaciones y para guardar el estado de las aplicaciones. Cubrimos sus caracter\u00edsticas m\u00e1s utilizadas, incluyendo c\u00f3mo utilizar los tipos de datos incorporados y estructurar documentos complejos. Algunas plataformas soportan las caracter\u00edsticas avanzadas de YAML, incluyendo tipos de datos personalizados.</p>","tags":["Lenguajes"]},{"location":"blog/posts/yaml/#referencias","title":"Referencias","text":"<p>[^1]: \u201cYAML Frontmatter - Fork My Brain\u201d. https://notes.nicolevanderhoeven.com/obsidian-playbook/Using+Obsidian/03+Linking+and+organizing/YAML+Frontmatter (consultado el 11 de septiembre de 2023). [^2]: \u201cThe Official YAML Web Site\u201d. https://yaml.org/ (consultado el 11 de septiembre de 2023). [^3]: \u201cYAML Reference Card\u201d. https://yaml.org/refcard.html (consultado el 11 de septiembre de 2023). [^4]: \u201cYAML Tutorial: Everything You Need to Get Started in Minutes\u201d, CloudBees, el 8 de marzo de 2023. https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started (consultado el 11 de septiembre de 2023). [^5]: \u201cLearn yaml in Y Minutes\u201d. https://learnxinyminutes.com/docs/yaml/ (consultado el 11 de septiembre de 2023). [^6]: \u201cProperties - Obsidian Help\u201d. https://help.obsidian.md/Editing+and+formatting/Properties (consultado el 12 de septiembre de 2023).</p>","tags":["Lenguajes"]},{"location":"tags/","title":"Tags","text":"<p>A continuaci\u00f3n figura una lista de etiquetas:</p> <p>[TAGS]</p>"}]}